<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YunLinOS Notes</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yunlinos.com/"/>
  <updated>2018-08-04T01:50:25.260Z</updated>
  <id>http://yunlinos.com/</id>
  
  <author>
    <name>YunLinOS</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Monkey源码解析</title>
    <link href="http://yunlinos.com/archives/ff7c0d4a.html"/>
    <id>http://yunlinos.com/archives/ff7c0d4a.html</id>
    <published>2018-08-03T06:57:41.000Z</published>
    <updated>2018-08-04T01:50:25.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间在梳理公司的自动化测试脚本时，发现Monkey是个挺有意思的工具，它向系统发送伪随机的用户事件流(如按键输入、触摸屏输入、手势输入等)，实现对正在开发的应用程序进行压力测试，这个倒很像一个梗<code>π里面藏着一部莎士比亚</code>。比较好奇它的实现原理，于是就有了研究源码的想法，说干就干，Read the Fucking Source Code。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>先将源码从系统中导出，我手头的AOSP是Android 5.1</p><ul><li>Monkey程序由Android系统自带，使用Java语言开发。在Android文件系统中的存放位置为：<code>/system/framework/monkey.jar</code>。在源码中的位置为<code>/development/cmds/monkey</code></li><li>Monkey.jar程序是由一个名为“monkey”的Shell脚本来启动执行，shell脚本位于Android文件系统中：<code>/system/bin/monkey</code>。在源码中的位置为<code>development/cmds/monkey/monkey</code></li></ul><p>下面，就将开始Monkey的源码阅读之旅。</p><h2 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h2><p>Monkey是由system/bin/monkey脚本启动system/framework/monkey.jar。下面是monkey脚本的内容：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Script to start "monkey" on the device, which has a very rudimentary</span><br><span class="line"><span class="meta">#</span> shell.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line">base=/system</span><br><span class="line"><span class="meta">#</span> 设置monkey的CLASSPATH环境变量指向monkey.jar</span><br><span class="line">export CLASSPATH=$base/framework/monkey.jar</span><br><span class="line">trap "" HUP</span><br><span class="line"><span class="meta">#</span> 通过app_process指定monkey的入口和传进来的所有参数启动上面CLASSPATH设定的monkey.jar</span><br><span class="line">exec app_process $base/bin com.android.commands.monkey.Monkey $*</span><br></pre></td></tr></table></figure></p><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p>可以通过adb命令执行Monkey脚本<code>adb shell monkey -p com.android.settings 500</code>，其基本流程如下：</p><ul><li>解析命令行参数</li><li>根据命令行参数选择不同的事件输入源，也就是事件源是从网络过来还是通过内部随机产生</li><li>跳入runMonkeyCycle方法针对不同事件源获取并开始执行不同的事件</li></ul><ol><li><p>入口在main方法，代码位于com.android.commands.monkey.Monkey.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Command-line entry point.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args The command-line arguments</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Set the process name showing in "ps" or "top"</span></span><br><span class="line">        Process.setArgV0(<span class="string">"com.android.commands.monkey"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> resultCode = (<span class="keyword">new</span> Monkey()).run(args);</span><br><span class="line">        System.exit(resultCode);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>解析输入参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Run the command!</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args The command-line arguments</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Returns a posix-style result code. 0 for no error.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">···</span><br><span class="line">        <span class="keyword">if</span> (!processOptions()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">···</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>根据输入的参数选择不同的事件输入流</p></li></ol><ul><li>MonkeySourceScript：通过相应的规则编写monkey脚本来驱动monkey进行事件注入，为非随机事件</li><li>MonkeySourceRandomScript：随机内部事件源，由脚本来触发，为随机事件</li><li>MonkeySourceNetwork：由网络（比如MonkeyRunner）发送过来的事件</li><li>MonkeySourceRandom：由monkey内部产生的随机事件集<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mScriptFileNames != <span class="keyword">null</span> &amp;&amp; mScriptFileNames.size() == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// script mode, ignore other options</span></span><br><span class="line">    mEventSource = <span class="keyword">new</span> MonkeySourceScript(mRandom, mScriptFileNames.get(<span class="number">0</span>), mThrottle,</span><br><span class="line">            mRandomizeThrottle, mProfileWaitTime, mDeviceSleepTime);</span><br><span class="line">    mEventSource.setVerbose(mVerbose);</span><br><span class="line"></span><br><span class="line">    mCountEvents = <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mScriptFileNames != <span class="keyword">null</span> &amp;&amp; mScriptFileNames.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mSetupFileName != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mEventSource = <span class="keyword">new</span> MonkeySourceRandomScript(mSetupFileName,</span><br><span class="line">                mScriptFileNames, mThrottle, mRandomizeThrottle, mRandom,</span><br><span class="line">                mProfileWaitTime, mDeviceSleepTime, mRandomizeScript);</span><br><span class="line">        mCount++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mEventSource = <span class="keyword">new</span> MonkeySourceRandomScript(mScriptFileNames,</span><br><span class="line">                mThrottle, mRandomizeThrottle, mRandom,</span><br><span class="line">                mProfileWaitTime, mDeviceSleepTime, mRandomizeScript);</span><br><span class="line">    &#125;</span><br><span class="line">    mEventSource.setVerbose(mVerbose);</span><br><span class="line">    mCountEvents = <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mServerPort != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mEventSource = <span class="keyword">new</span> MonkeySourceNetwork(mServerPort);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"Error binding to network socket."</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mCount = Integer.MAX_VALUE;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// random source by default</span></span><br><span class="line">    <span class="keyword">if</span> (mVerbose &gt;= <span class="number">2</span>) &#123; <span class="comment">// check seeding performance</span></span><br><span class="line">        System.out.println(<span class="string">"// Seeded: "</span> + mSeed);</span><br><span class="line">    &#125;</span><br><span class="line">    mEventSource = <span class="keyword">new</span> MonkeySourceRandom(mRandom, mMainApps, mThrottle, mRandomizeThrottle);</span><br><span class="line">    mEventSource.setVerbose(mVerbose);</span><br><span class="line">    <span class="comment">// set any of the factors that has been set</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MonkeySourceRandom.FACTORZ_COUNT; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mFactors[i] &lt;= <span class="number">0.0f</span>) &#123;</span><br><span class="line">            ((MonkeySourceRandom) mEventSource).setFactors(i, mFactors[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// in random mode, we start with a random activity</span></span><br><span class="line">    ((MonkeySourceRandom) mEventSource).generateActivity();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li><p>循环执行事件<br>run方法根据参数从不同的事件源获得事件并放入到EventQueue后，就会开始执行一个循环去从EventQueue里获取事件进行执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">···</span><br><span class="line">        mNetworkMonitor.start();</span><br><span class="line">        <span class="keyword">int</span> crashedAtCycle = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            crashedAtCycle = runMonkeyCycles();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Release the rotation lock if it's still held and restore the</span></span><br><span class="line">            <span class="comment">// original orientation.</span></span><br><span class="line">            <span class="keyword">new</span> MonkeyRotationEvent(Surface.ROTATION_0, <span class="keyword">false</span>).injectEvent(</span><br><span class="line">                    mWm, mAm, mVerbose);</span><br><span class="line">        &#125;</span><br><span class="line">        mNetworkMonitor.stop();</span><br><span class="line">···</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>runMonkeyCyles方法会根据不同的数据源开始一条条的获取事件并进行执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">MonkeyEvent ev = mEventSource.getNextEvent();</span><br><span class="line"><span class="keyword">if</span> (ev != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> injectCode = ev.injectEvent(mWm, mAm, mVerbose);</span><br><span class="line">    <span class="keyword">if</span> (injectCode == MonkeyEvent.INJECT_FAIL) &#123;</span><br><span class="line">        System.out.println(<span class="string">"    // Injection Failed"</span>);</span><br><span class="line">        <span class="keyword">if</span> (ev <span class="keyword">instanceof</span> MonkeyKeyEvent) &#123;</span><br><span class="line">            mDroppedKeyEvents++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ev <span class="keyword">instanceof</span> MonkeyMotionEvent) &#123;</span><br><span class="line">            mDroppedPointerEvents++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ev <span class="keyword">instanceof</span> MonkeyFlipEvent) &#123;</span><br><span class="line">            mDroppedFlipEvents++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ev <span class="keyword">instanceof</span> MonkeyRotationEvent) &#123;</span><br><span class="line">            mDroppedRotationEvents++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (injectCode == MonkeyEvent.INJECT_ERROR_REMOTE_EXCEPTION) &#123;</span><br><span class="line">        systemCrashed = <span class="keyword">true</span>;</span><br><span class="line">        System.err.println(<span class="string">"** Error: RemoteException while injecting event."</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (injectCode == MonkeyEvent.INJECT_ERROR_SECURITY_EXCEPTION) &#123;</span><br><span class="line">        systemCrashed = !mIgnoreSecurityExceptions;</span><br><span class="line">        <span class="keyword">if</span> (systemCrashed) &#123;</span><br><span class="line">            System.err.println(<span class="string">"** Error: SecurityException while injecting event."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Don't count throttling as an event.</span></span><br><span class="line">    <span class="keyword">if</span> (!(ev <span class="keyword">instanceof</span> MonkeyThrottleEvent)) &#123;</span><br><span class="line">        eventCounter++;</span><br><span class="line">        <span class="keyword">if</span> (mCountEvents) &#123;</span><br><span class="line">            cycleCounter++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mCountEvents) &#123;</span><br><span class="line">        cycleCounter++;</span><br><span class="line">        writeScriptLog(cycleCounter);</span><br><span class="line">        <span class="comment">//Capture the bugreport after n iteration</span></span><br><span class="line">        <span class="keyword">if</span> (mGetPeriodicBugreport) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((cycleCounter % mBugreportFrequency) == <span class="number">0</span>) &#123;</span><br><span class="line">                mRequestPeriodicBugreport = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Event Source has signaled that we have no more events to process</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行事件主要为与MonkeyEvent的injectEvent方法，例如MonkeykeyEvent事件的执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">injectEvent</span><span class="params">(IWindowManager iwm, IActivityManager iam, <span class="keyword">int</span> verbose)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (verbose &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        String note;</span><br><span class="line">        <span class="keyword">if</span> (mAction == KeyEvent.ACTION_UP) &#123;</span><br><span class="line">            note = <span class="string">"ACTION_UP"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            note = <span class="string">"ACTION_DOWN"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">":Sending Key ("</span> + note + <span class="string">"): "</span></span><br><span class="line">                    + mKeyCode + <span class="string">"    // "</span></span><br><span class="line">                    + MonkeySourceRandom.getKeyName(mKeyCode));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">":Sending Key ("</span> + note + <span class="string">"): "</span></span><br><span class="line">                    + mKeyCode + <span class="string">"    // Unknown key event"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    KeyEvent keyEvent = mKeyEvent;</span><br><span class="line">    <span class="keyword">if</span> (keyEvent == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">long</span> eventTime = mEventTime;</span><br><span class="line">        <span class="keyword">if</span> (eventTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            eventTime = SystemClock.uptimeMillis();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> downTime = mDownTime;</span><br><span class="line">        <span class="keyword">if</span> (downTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            downTime = eventTime;</span><br><span class="line">        &#125;</span><br><span class="line">        keyEvent = <span class="keyword">new</span> KeyEvent(downTime, eventTime, mAction, mKeyCode,</span><br><span class="line">                mRepeatCount, mMetaState, mDeviceId, mScanCode,</span><br><span class="line">                KeyEvent.FLAG_FROM_SYSTEM, InputDevice.SOURCE_KEYBOARD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!InputManager.getInstance().injectInputEvent(keyEvent,</span><br><span class="line">            InputManager.INJECT_INPUT_EVENT_MODE_WAIT_FOR_RESULT)) &#123;</span><br><span class="line">        <span class="keyword">return</span> MonkeyEvent.INJECT_FAIL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> MonkeyEvent.INJECT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>以上，基本就完成了整个事件注入的流程</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Monkey的软件架构图：<br><img src="/archives/ff7c0d4a/Monkey结构图.png" alt="你想输入的替代文字"></p><p>Monkey的工作原理图：<br><img src="/archives/ff7c0d4a/自动化测试架构图.png" alt="Monkey的工作原理图"></p><p>再次总结下其工作流程如下：</p><ol><li>由<code>system/bin/monkey</code>启动Monkey进程</li><li>解析命令行参数</li><li>根据输入的参数选择不同的事件输入流：是从网络过来还是通过内部随机产生</li><li>跳入runMonkeyCycle方法针对不同事件源获取事件</li><li>向系统注入事件</li></ol><p>另外，关于如何向Android中进行事件注入，将在下篇博客中展现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间在梳理公司的自动化测试脚本时，发现Monkey是个挺有意思的工具，它向系统发送伪随机的用户事件流(如按键输入、触摸屏输入、手势输入等
      
    
    </summary>
    
      <category term="Android系统源码" scheme="http://yunlinos.com/categories/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Monkey" scheme="http://yunlinos.com/tags/Monkey/"/>
    
      <category term="自动化测试" scheme="http://yunlinos.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yunlinos.com/archives/4a17b156.html"/>
    <id>http://yunlinos.com/archives/4a17b156.html</id>
    <published>2018-08-01T12:23:53.033Z</published>
    <updated>2018-08-04T01:09:04.963Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到YunLin的博客，本博客基于<a href="https://github.com/" title="Github" target="_blank" rel="noopener">Github</a>和<a href="https://hexo.io/zh-cn/" title="Hexo" target="_blank" rel="noopener">Hexo</a>搭建，使用<a href="https://github.com/iissnan/hexo-theme-next" title="NexT.Mist" target="_blank" rel="noopener">NexT.Mist</a>主题。在阿里云购买的域名，分别为<a href="http://yunlinos.com/" title="www.yunlinos.com">www.yunlinos.com</a>和<a href="http://yunlinos.cn/" title="www.yunlinos.cn" target="_blank" rel="noopener">www.yunlinos.cn</a>。</p><p>在这里，坚决减少记录性内容，避免环境的简单搭建；多些源码的解读、架构的思考、底层的原理，确保内容高质量。</p><p>现阶段内容包括不限于：</p><ul><li>开源项目的源码解读，偏向于设计思想和优秀的代码实现</li><li>Android源码的实现，偏向于功能的原理性解读</li><li>深耕计算机网络、Java虚拟机方面</li></ul><p>当然，最重要的还是坚持，让更多的人得到帮助，也让自己的成长滴水成河。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎来到YunLin的博客，本博客基于&lt;a href=&quot;https://github.com/&quot; title=&quot;Github&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github&lt;/a&gt;和&lt;a href=&quot;https://hexo.io/zh-cn/
      
    
    </summary>
    
      <category term="个人思考总结" scheme="http://yunlinos.com/categories/%E4%B8%AA%E4%BA%BA%E6%80%9D%E8%80%83%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="总结" scheme="http://yunlinos.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
